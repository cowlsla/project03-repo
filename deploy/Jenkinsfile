pipeline {
  agent any
  tools {
    maven "M3"
    jdk "JDK11"
  }
  parameters{
    string(name: 'APPLICATION_NAME', defaultValue: 'project03', description: 'Name of the AWS CodeDeploy application')
    string(name: 'DEPLOYMENT_GROUP', defaultValue: 'project03-deploy', description: 'Name of the AWS CodeDeploy deployment group')
    string(name: 'REPOSITORY_NAME', defaultValue: 'https://github.com/cowlsla/project03-repo', description: 'Name of the GitHub repository')
    string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Name of the Git branch')
  }
  environment {
    AWS_CREDENTIAL_NAME = "awsEcrCredential"
    AWS_ACCOUNT_ID = "257307634175"
    REGION = "ap-northeast-2"
    DOCKER_IMAGE_NAME = "project03-spring-petclinic"
    DOCKER_TAG = "1.0"
    REVISION_TYPE = 'GitHub' 
    COMMIT_ID = '$(git rev-parse HEAD)'
    ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}"
    ECR_DOCKER_TAG = "${DOCKER_TAG}"
  }
  stages {
    stage ('Git Fetch') {
      steps {
        echo 'Git Fetch'
        git url: "${REPOSITORY_NAME}", branch: "${BRANCH_NAME}", credentialsId: 'gitCredential'
      }
    }
    stage ('Mvn Build') {
      steps {
        echo 'Mvn Build'
        sh 'mvn -Dmaven.test.failure.ignore=true clean package'
      }
    }
    stage ('Docker Image') {
      steps {
        echo 'Docker Image'
        dir("${env.WORKSPACE}") {
          sh "docker build -t ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} ./"
        }
      }
    }
    stage ('Image Push') {
      steps {
        echo 'Image Push' 
        script{
          // cleanup current user docker credentials
          sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'                    
                   
          docker.withRegistry("https://${ECR_REPOSITORY}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
            docker.image("${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG}").push()
          }
        }
      }
    }
    stage('Checkout') {
      steps {
        echo 'Checkout'
        checkout([$class: 'GitSCM', 
                  branches: [[name: env.BRANCH_NAME]], 
                  userRemoteConfigs: [[url: env.REPOSITORY_NAME]]])
      }
    }
    stage('Deploy to CodeDeploy') {
      steps {
        echo 'Deploy to CodeDeploy'
        // CodeDeploy 배포 시작
        sh """
           aws deploy create-deployment \
--region ap-northeast-2 \
--application-name project03 \
--deployment-group-name project03-deploy \
--revision-location repository=Github,commitId=$(git rev-parse HEAD)
            """
                    // 배포 상태 확인
                    script {
                        def deploymentId = sh (
                            script: "aws deploy list-deployments --region ${env.REGION} --application-name ${env.APPLICATION_NAME} --deployment-group-name ${env.DEPLOYMENT_GROUP} --sort-by DESCENDING --query deployments[0]",
                            returnStdout: true
                        ).trim().replaceAll('"', '')
                        
                        def deploymentInfo = sh (
                            script: "aws deploy get-deployment --region ${env.REGION} --deployment-id ${deploymentId} --query deploymentInfo",
                            returnStdout: true
                        ).trim()
                        
                        def status = sh (
                            script: "echo ${deploymentInfo} | jq -r '.status'",
                            returnStdout: true
                        ).trim()
                        
                        // CodeDeploy 배포 완료까지 대기
                        while (status != 'Succeeded') {
                            sleep 10
                            deploymentInfo = sh (
                                script: "aws deploy get-deployment --region ${env.REGION} --deployment-id ${deploymentId} --query deploymentInfo",
                                returnStdout: true
                            ).trim()
                            status = sh (
                                script: "echo ${deploymentInfo} | jq -r '.status'",
                                returnStdout: true
                            ).trim()
                        }
                    }
       }
     }
   }
}
