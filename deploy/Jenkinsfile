pipeline {
  agent any
  tools {
    maven "M3"
    jdk "JDK11"
  }
  parameters{
          string(name: 'APPLICATION_NAME', defaultValue: 'project03', description: 'Name of the AWS CodeDeploy application')
          string(name: 'DEPLOYMENT_GROUP', defaultValue: 'project03-deploy', description: 'Name of the AWS CodeDeploy deployment group')
          string(name: 'REPOSITORY_NAME', defaultValue: 'https://github.com/cowlsla/project03-repo', description: 'Name of the GitHub repository')
          string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'Name of the Git branch')
  }
  environment {
    AWS_CREDENTIAL_NAME = "awsEcrCredential"
    AWS_ACCOUNT_ID = "257307634175"
    REGION = "ap-northeast-2"
    DOCKER_IMAGE_NAME = "project03-spring-petclinic"
    DOCKER_TAG = "1.0"
    ECR_REPOSITORY = "${AWS_ACCOUNT_ID}.dkr.ecr.ap-northeast-2.amazonaws.com"
    ECR_DOCKER_IMAGE = "${ECR_REPOSITORY}/${DOCKER_IMAGE_NAME}"
    ECR_DOCKER_TAG = "${DOCKER_TAG}"
  }
   stages {
    stage ('Git fatch') {
      steps {
       echo 'Git fatch'
       git url: 'https://github.com/cowlsla/project03-repo.git',
         branch: 'main', credentialsId: 'gitCredential'
      }
    }
    stage ('Mvn Build') {
      steps {
        echo 'Mvn Build'
        sh 'mvn -Dmaven.test.failure.ignore=true clean package'
      }
    }
    stage ('Docker Image') {
      steps {
        echo 'Docker Image'
        dir("${env.WORKSPACE}") {
          sh 'docker build -t ${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG} ./'
        }
      }
    }
    stage ('Image Push') {
      steps {
       echo 'Image Push' 
       script{
         // cleanup current user docker credentials
         sh 'rm -f ~/.dockercfg ~/.docker/config.json || true'                    
                   
         docker.withRegistry("https://${ECR_REPOSITORY}", "ecr:${REGION}:${AWS_CREDENTIAL_NAME}") {
           docker.image("${ECR_DOCKER_IMAGE}:${ECR_DOCKER_TAG}").push()
         }
       }
      }
    }
    stage('Deploy workload') {
        when { expression { return params.DEPLOY_WORKLOAD } }
        agent { label 'master' }
        steps {
            echo "Run CodeDeploy with creating deployment"
            script {
                sh'''
                    aws deploy create-deployment \
                        --application-name ${CODEDEPLOY_NAME} \
                        --deployment-group-name ${CODEDEPLOY_GROUP_NAME} \
                        --region ${REGION} \
                        --s3-location bucket=${CODEBUILD_ARTIFACT_S3_NAME},bundleType=zip,key=${CODEBUILD_ARTIFACT_S3_KEY} \
                        --file-exists-behavior OVERWRITE \
                        --output json > DEPLOYMENT_ID.json
                '''
                def DEPLOYMENT_ID = sh(script: "cat DEPLOYMENT_ID.json | grep -o '\"deploymentId\": \"[^\"]*' | cut -d'\"' -f4", returnStdout: true).trim()
                echo "$DEPLOYMENT_ID"
                sh "rm -rf ./DEPLOYMENT_ID.json"
                def DEPLOYMENT_RESULT = ""
                while("$DEPLOYMENT_RESULT" != "\"Succeeded\"") {
                    DEPLOYMENT_RESULT = sh(
                        script:"aws deploy get-deployment \
                                    --region ${REGION} \
                                    --query \"deploymentInfo.status\" \
                                    --deployment-id ${DEPLOYMENT_ID}",
                        returnStdout: true
                    ).trim()
                    echo "$DEPLOYMENT_RESULT"
                    if ("$DEPLOYMENT_RESULT" == "\"Failed\"") {
                        currentBuild.result = 'FAILURE'
                        break
                    }
                    sleep(10) // sleep 10s
                }
                currentBuild.result = 'SUCCESS'
            }
        }
    }
   }
}

